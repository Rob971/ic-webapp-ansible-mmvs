---
- name: Update System
  yum:
    name: "*"
    state: latest

  tasks:
    - name: Remove docker if installed from CentOS repo
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent

    - name: Install prerequisites
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - python3
        - python3-pip
      when: ansible_distribution == "CentOS"
      
    - name: download pip script
      get_url:
        url: https://bootstrap.pypa.io/pip/3.6/get-pip.py
        dest: /tmp/get-pip.py
    - name: install python-pip
      command: python3 /tmp/get-pip.py
      ignore_errors: yes
    - name: Install docker python
      pip:
        name: docker-py
        executable: /usr/local/bin/pip3
    
    - name: Add Docker repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      when: ansible_distribution == "CentOS"
    
    
    - name: Install Docker
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
      when: ansible_distribution == "CentOS"
    
    - name: "Install Docker on Amazon Linux"
      command: amazon-linux-extras install docker -y
      args:
        creates: /usr/bin/docker
      when: ansible_distribution == "Amazon"
    
    - name: Add remote user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: dockerroot
        append: yes
      when: ansible_distribution == "CentOS"    
    
    - name: Add remote user to docker group on EC2
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_distribution == "Amazon"
    
    - name: Start and enable the Docker daemon
      service: 
        name: docker 
        state: started 
        enabled: yes
    
    - name: Get version number of latest docker-compose
      shell:
        cmd: curl --silent 'https://api.github.com/repos/docker/compose/releases/latest' |  grep '"tag_name":' | cut -d'"' -f4
      register: docker_compose_latest_svn
      changed_when: false
      args:
        warn: no
    
    - set_fact:
        docker_compose_latest: "{{ docker_compose_latest_svn.stdout }}"
      when:
        - docker_compose_latest_svn.stdout is defined
    
    - name: Check if /usr/local/bin/docker-compose exists.
      stat:
        path: /usr/local/bin/docker-compose
      register: docker_compose_file
    
    - name: Check current docker-compose version
      shell:
        cmd: /usr/local/bin/docker-compose --version | cut -d ' ' -f3 | sed 's/.$//'
      register: docker_compose_vsn
      changed_when: false
      failed_when: false
      args:
        warn: no
      when:
        - docker_compose_file.stat.exists
    
    - set_fact:
        docker_compose_current_version: "{{ docker_compose_vsn.stdout }}"
      when:
        - docker_compose_vsn.stdout is defined and docker_compose_file.stat.exists
    
    - name: Install or upgrade docker-compose
      get_url:
        url : "https://github.com/docker/compose/releases/download/{{ docker_compose_latest }}/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: 'a+x'
        force: yes
      when: >
        docker_compose_current_version is not defined
        or docker_compose_current_version is version(docker_compose_latest, '<') 
